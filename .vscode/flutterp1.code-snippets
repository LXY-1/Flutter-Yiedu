{
	// Place your flutterproject workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// 关于flutter的基础模板：从头到尾，遇到的就在这里添加
	"@comment": {
		"scope": "dart,flutter",
		"prefix": "@my0sver",
		"body": [
			"@override",
			"$1 createState() => new $2();"
		],
		"description": "@comment"
	},
	//app main函数
	"flutter-main": {
		"scope": "dart,flutter",
		"prefix": "@myfmain",
		"body": [
			"void main() {",
			"FlutterError.onError = (FlutterErrorDetails details) {",
			"print(details);",
			"};",
			"return runApp(MyApp());",
			"}",
		],
		"description": "flutter main函数"
	},
	// app-Widget
	"flutter-app-Widget": {
		"scope": "dart,flutter",
		"prefix": "@myfappwidget",
		"body": [
			"routes: {",
			"  'new_page1': (context) => TipRoute(text: '我是路由参数'),",
			"},",
			"//   在这里做路由页面权限判断",
			"onGenerateRoute: (RouteSettings settings) {",
			"  return MaterialPageRoute(builder: (context) {",
			"    String routeName = settings.name;",
			"    print(routeName);",
			"    // 如果访问的路由页需要登录，但当前未登录，则直接返回登录页路由，",
			"    // 引导用户登录；其它情况则正常打开路由。",
			"  });",
			"},"
		],
		"description": "flutter app 应用 全局 widget"
	},
	//fluter-stateFulWidget：带状态的页面级别widget 
	"fluter-stateFulWidget": {
		"scope": "dart,flutter",
		"prefix": "@myfstateful",
		"body": [
			"class $1 extends StatefulWidget {",
			"$1({Key key, this.$3}) : super(key: key);",
			"// 进入页面定义需要的参数title，页面传参才需要用到",
			"final String $3;",
			"// 管理此widget状态和界面的State实例",
			"@override",
			"$2 createState() => $2();",
			"}",
			"// 界面状态还有样式的控制",
			"class $2 extends State<$1> {",
			"// widget管理的相关状态属性",
			"int $4 = 0;",
			"// 触发->状态改变->通知flutter改变ui界面",
			"void _incrementCounter() {",
			"setState(() {",
			"$4 = $4 + 2;",
			"});",
			"}",
			"// 构建ui界面",
			"@override",
			"Widget build(BuildContext context) {",
			"return Scaffold(",
			"appBar: AppBar(",
			"title: Text(widget.title),",
			"),",
			"body: Center(",
			"child: Column(",
			"children: <Widget>[",
			"Text(",
			"'You have pushed the button this many times:',",
			"),",
			"Text(",
			"'$_counter',",
			"style: Theme.of(context).textTheme.display1,",
			"),",
			"FlatButton(",
			"child: Text('open new route'),",
			"textColor: Colors.blue,",
			"onPressed: () {",
			"// 导航到新路由",
			"//方式一",
			"// Navigator.push(context, MaterialPageRoute(builder: (context) {",
			"//   return NewRoute();",
			"// }));",
			"// 方式二：命名路由：推荐使用",
			"// Navigator.pushNamed(context, 'new_page');",
			"},",
			"),",
			"],",
			"),",
			"),",
			"// This trailing comma makes auto-formatting nicer for build methods.",
			");",
			"}",
			"}",
		],
		"description": "flutter 带状态的widget"
	},
	//fluter-stateLessWidget：不带状态的页面级别widget 
	"fluter-stateLessWidget": {
		"scope": "dart,flutter",
		"prefix": "@myfstateless",
		"body": [
			"//!定义一个无状态的widget：页面级别，支持页面传参数",
			"class $1 extends StatelessWidget {",
			"$1({",
			"Key key,",
			"//@required this.$2, // 接收一个text参数",
			"}) : super(key: key);",
			"//final String $2;",
			"@override",
			"Widget build(BuildContext context) {",
			"return Scaffold(",
			"appBar: AppBar(",
			"title: Text('页面标题'),",
			"),",
			"body: Padding(",
			"padding: EdgeInsets.all(18),",
			"child: Center(",
			"child: Column(",
			"children: <Widget>[",
			"Text($2),",
			"RaisedButton(",
			"// 点击返回按钮，同时返回参数，需要在父级的wisget通过Native返回的future获取：异步的",
			"//onPressed: () => Navigator.pop(context, '我是返回值'),",
			"child: Text('返回'),",
			")",
			"],",
			"),",
			"),",
			"),",
			");",
			"}",
			"}",
		],
		"description": "flutter 带状态的widget"
	},
	// 路由push跳转
	"flutter-route-push": {
		"scope": "dart,flutter",
		"prefix": "@myfrpush",
		"body": [
			"Navigator.push(context, MaterialPageRoute(builder: (context) {",
			"return NewRoute();",
			"}));",
			"//如果需要接收页面返回参数",
			"//onPressed: () async {",
			"// 打开TipRoute，并等待返回结构,",
			"//!Navigator.push用于打开一个新页面，且返回一个Future对象，（异步的），而且Future里面包含了",
			"//!新路由出栈（即关闭刚才打开的页面）时的返回数据。所以这里通过await获取Future对象里面的数据。。",
			"//var result = await Navigator.push",
		],
		"description": "flutter 路由push跳转"
	},
	// padding
	"flutter-padding": {
		"scope": "dart,flutter",
		"prefix": "@myfpadding",
		"body": [
			"padding: const EdgeInsets.all(16.0),",
		],
		"description": "flutter padding容器设置padding属性"
	},
	//row
	"flutter-row": {
		"scope": "dart,flutter",
		"prefix": "@myfrow",
		"body": [
			"Row(",
			"mainAxisAlignment: MainAxisAlignment.center,//水平对齐",
			"textDirection: TextDirection.rtl,//文本方向",
			"mainAxisSize :MainAxisSize.max,//默认：占最大空间",
			"VerticalDirection:VerticalDirection.down,//默认表示Row纵轴（垂直）的对齐方向",
			"crossAxisAlignment:CrossAxisAlignment.center,//表示子组件在纵轴方向的对齐方式",
			"children: <Widget>[],",
			" ),",
		],
		"description": "flutter row容器属性"
	},
	//column
	"flutter-column": {
		"scope": "dart,flutter",
		"prefix": "@myfcolumn",
		"body": [
			"Row(",
			"mainAxisAlignment: MainAxisAlignment.center,//垂直对齐",
			"textDirection: TextDirection.rtl,//文本方向",
			"mainAxisSize :MainAxisSize.max,//默认：占最大空间",
			"VerticalDirection:VerticalDirection.down,//默认表示纵轴（垂直）的对齐方向",
			"crossAxisAlignment:CrossAxisAlignment.center,//表示子组件在纵轴方向的对齐方式",
			"children: <Widget>[],",
			" ),",
		],
		"description": "flutter column容器属性"
	},
	//flex布局
	"fluter-flex": {
		"scope": "dart,flutter",
		"prefix": "@myfflex",
		"body": [
			"Flex(",
			"direction: Axis.horizontal,",
			" children: <Widget>[",
			"Expanded(",
			"flex: 1,",
			"child: Container(",
			"height: 30.0,",
			" color: Colors.red,",
			" ),",
			"),",
			"//Spacer占位符",
			"Spacer(",
			"flex: 1,",
			"),",
			"Expanded(",
			" flex: 2,",
			"child: Container(",
			" height: 30.0,",
			" color: Colors.green,",
			"),",
			"),",
			"],",
			" ),",
		],
		"description": "flutter-flex"
	},
	// 流式布局
	"fluter-wrap": {
		"scope": "dart,flutter",
		"prefix": "@myfwrap",
		"body": [
			"Wrap(",
			"// 主轴(水平)方向间距",
			"spacing: 8.0,",
			"// 纵轴（垂直）方向间距",
			"runSpacing: 4.0,",
			"//沿主轴方向居中",
			"alignment: WrapAlignment.center,",
			"children: <Widget>[",
			"new Chip(",
			"avatar: new CircleAvatar(backgroundColor: Colors.blue, child: Text('A')),",
			"label: new Text('Hamilton'),",
			"),",
			"new Chip(",
			"avatar: new CircleAvatar(backgroundColor: Colors.blue, child: Text('M')),",
			"label: new Text('Lafayette'),",
			"),",
			"new Chip(",
			"avatar: new CircleAvatar(backgroundColor: Colors.blue, child: Text('H')),",
			"label: new Text('Mulligan'),",
			"),",
			"new Chip(",
			"avatar: new CircleAvatar(backgroundColor: Colors.blue, child: Text('J')),",
			"label: new Text('Laurens'),",
			"),",
			"],",
			")",
		],
		"description": "flutter-flex"
	},
	// 层叠布局:按照子组件的排列顺序，会进行遮挡。
	"fluter-stack-postition": {
		"scope": "dart,flutter",
		"prefix": "@myfstack",
		"body": [
			"Stack(",
			"alignment:Alignment.center , //指定未定位或部分定位widget的对齐方式",
			"children: <Widget>[",
			"Container(child: Text('Hello world',style: TextStyle(color: Colors.white)),",
			"color: Colors.red,",
			"),",
			"Positioned(",
			"left: 18.0,",
			"child: Text('I am Jack'),",
			"),",
			"Positioned(",
			"top: 18.0,",
			"child: Text('Your friend'),",
			")   ",
			"],",
			"),",
		],
		"description": "fluter-stack-postition"
	},
	// transform实现相关变换特效
	"fluter-transform": {
		"scope": "dart,flutter",
		"prefix": "@myftransform",
		"body": [
			" new Transform(",
			"alignment: Alignment.topRight, //相对于坐标系原点的对齐方式",
			"transform: new Matrix4.skewY(0.3), //沿Y轴倾斜0.3弧度，就是沿着y轴方向",
			"child: new Container(",
			" padding: const EdgeInsets.all(8.0),",
			"color: Colors.deepOrange,",
			"  child: const Text('Apartment for rent!'),",
			"),",
			"),",
		],
		"description": "fluter-transform"
	},
	// 可滚动组件加滚动条
	"fluter-scrollbar": {
		"scope": "dart,flutter",
		"prefix": "@myfscrollbar",
		"body": [
			"Scrollbar(",
			"child: SingleChildScrollView(",
			"...",
			"),",
			");",
		],
		"description": "fluter-scrollbar"
	},
	//listview
	"fluter-listview": {
		"scope": "dart,flutter",
		"prefix": "@myflistview",
		"body": [
			"class $1 extends StatefulWidget {",
			"@override",
			"$2 createState() => new $2();",
			"}",
			"class $2 extends State<$1> {",
			"static const loadingTag = '##loading##'; //表尾标记:用于判断是否到达底部",
			"var _words = <String>[loadingTag];",
			"@override",
			"void initState() {",
			"super.initState();",
			"_retrieveData();",
			"}",
			"@override",
			"Widget build(BuildContext context) {",
			"return ListView.separated(",
			"itemCount: _words.length,",
			"itemBuilder: (context, index) {",
			"//如果到了表尾",
			"if (_words[index] == loadingTag) {",
			"//不足100条，继续获取数据",
			"if (_words.length - 1 < 100) {",
			"//获取数据",
			"_retrieveData();",
			"//加载时显示loading",
			"return Container(",
			"padding: const EdgeInsets.all(16.0),",
			"alignment: Alignment.center,",
			"child: SizedBox(",
			"width: 24.0,",
			"height: 24.0,",
			"child: CircularProgressIndicator(strokeWidth: 2.0)",
			"),",
			");",
			"} else {",
			"//已经加载了100条数据，不再获取数据。",
			"return Container(",
			"alignment: Alignment.center,",
			"padding: EdgeInsets.all(16.0),",
			"child: Text('没有更多了', style: TextStyle(color: Colors.grey),)",
			");",
			"}",
			"}",
			"//显示单词列表项",
			"return ListTile(title: Text(_words[index]));",
			"},",
			"separatorBuilder: (context, index) => Divider(height: .0),",
			");",
			"}",
			"void _retrieveData() {",
			"Future.delayed(Duration(seconds: 2)).then((e) {",
			"_words.insertAll(_words.length - 1,",
			"//每次生成20个单词",
			"generateWordPairs().take(20).map((e) => e.asPascalCase).toList()",
			");",
			"setState(() {",
			"//重新构建列表",
			"});",
			"});",
			"}",
			"}",
		],
		"description": "fluter-listview"
	},
	"fluter-grideview": {
		"scope": "dart,flutter",
		"prefix": "@myfgrideview",
		"body": [
			"// girdeView:二维网格布局：下面是实现异步获取网络数据渲染",
			"class $1 extends StatefulWidget {",
			"@override",
			"$2 createState() => new $2();",
			"}",
			"class $2 extends State<$1> {",
			"List<IconData> _icons = []; //保存Icon数据",
			"@override",
			"void initState() {",
			"// 初始化数据  ",
			"_retrieveIcons();",
			"}",
			"@override",
			"Widget build(BuildContext context) {",
			"return GridView.builder(",
			"gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(",
			"crossAxisCount: 3, //每行三列",
			"childAspectRatio: 1.0 //显示区域宽高相等",
			"),",
			"itemCount: _icons.length,",
			"itemBuilder: (context, index) {",
			"//如果显示到最后一个并且Icon总数小于200时继续获取数据",
			"if (index == _icons.length - 1 && _icons.length < 200) {",
			"_retrieveIcons();",
			"}",
			"// 返回每一个GradiViewd的item展示的组件",
			"return Icon(_icons[index]);",
			"}",
			");",
			"}",
			"//模拟异步获取数据",
			"void _retrieveIcons() {",
			"Future.delayed(Duration(milliseconds: 200)).then((e) {",
			"setState(() {",
			"_icons.addAll([",
			"Icons.ac_unit,",
			"Icons.airport_shuttle,",
			"Icons.all_inclusive,",
			"Icons.beach_access, Icons.cake,",
			"Icons.free_breakfast",
			"]);",
			"});",
			"});",
			"}",
			"}",
		],
		"description": "fluter-grideview"
	},
	"fluter-customscrollview": {
		"scope": "dart,flutter",
		"prefix": "@myfcustomscrollview",
		"body": [
			"//页面模板:customScrollview自定义scroll",
			"class CustomScrollViewTestRoute extends StatelessWidget {",
			"@override",
			"Widget build(BuildContext context) {",
			"//因为本路由没有使用Scaffold，为了让子级Widget(如Text)使用",
			"//Material Design 默认的样式风格,我们使用Material作为本路由的根。",
			"return Material(",
			"child: CustomScrollView(",
			"slivers: <Widget>[",
			"// appbar:包含一个导航栏",
			"SliverAppBar(",
			"pinned: true,",
			"expandedHeight: 250.0,",
			"flexibleSpace: FlexibleSpaceBar(",
			"title: const Text('Demo'),",
			"background: Image.network(",
			"'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4258281848,3690429498&fm=26&gp=0.jpg',",
			"fit: BoxFit.cover,",
			"),",
			"),",
			"),",
			"SliverPadding(",
			"padding: const EdgeInsets.all(8.0),",
			"sliver: new SliverGrid(",
			"gridDelegate: new SliverGridDelegateWithFixedCrossAxisCount(",
			"crossAxisCount: 2, // gride按两列显示",
			"mainAxisSpacing: 10.0,",
			"crossAxisSpacing: 10.0,",
			"childAspectRatio: 4.0),",
			"delegate: new SliverChildBuilderDelegate(",
			"(BuildContext context, int index) {",
			"// 创建子widget",
			"return new Container(",
			"alignment: Alignment.center,",
			"color: Colors.cyan[100 * (index % 10)],",
			"child: new Text('grid item $index'),",
			");",
			"}, childCount: 20)),",
			"),",
			"//list",
			"new SliverFixedExtentList(",
			"itemExtent: 50.0,",
			"delegate: new SliverChildBuilderDelegate(",
			"(BuildContext context, int index) {",
			"//创建列表项目",
			"return new Container(",
			"alignment: Alignment.center,",
			"color: Colors.lightBlue[100 * (index % 10)],",
			"child: new Text('list item $index'),",
			");",
			"}, childCount: 50),",
			")",
			"],",
			"),",
			");",
			"}",
			"}",
		],
		"description": "fluter-customscrollview"
	},
	//使用Material组件库提供的页面脚手架Scaffold + TabBar + drawer实现一个app的基础页面骨架
	"fluter-page-scaffold": {
		"scope": "dart,flutter",
		"prefix": "@myfcuscaffoldpageframe",
		"body": [
			"// 使用Material组件库提供的页面脚手架Scaffold + TabBar + drawer实现一个app的基础页面骨架",
			"class ScaffoldRoute extends StatefulWidget {",
			"@override",
			"_ScaffoldRouteState createState() => _ScaffoldRouteState();",
			"}",
			"// 界面状态还有样式的控制",
			"class _ScaffoldRouteState extends State<ScaffoldRoute>",
			"with SingleTickerProviderStateMixin {",
			"// widget管理的相关状态属性",
			"int _selectIndex = 1;",
			"//顶部导航栏",
			"TabController _tabController; //需要定义一个Controller",
			"List tabs = ['新闻', '历史', '图片'];",
			"@override",
			"void initState() {",
			"super.initState();",
			"// 创建Controller",
			"_tabController = TabController(length: tabs.length, vsync: this);",
			"}",
			"// 构建ui界面",
			"@override",
			"Widget build(BuildContext context) {",
			"return Scaffold(",
			"appBar: AppBar(",
			"title: Text('易教育'), // 标题",
			"bottom: TabBar(",
			"//定义顶部导航栏",
			"controller: _tabController,",
			"tabs: tabs",
			".map((e) => Tab(",
			"text: e,",
			"))",
			".toList(),",
			"),",
			"actions: <Widget>[",
			"// 导航栏右侧菜单",
			"IconButton(",
			"icon: Icon(Icons.share),",
			"onPressed: () {},",
			")",
			"], //",
			"),",
			"drawer: new MyDrawer(), //抽屉菜单widget",
			"bottomNavigationBar: BottomNavigationBar(",
			"//底部导航栏",
			"items: <BottomNavigationBarItem>[",
			"BottomNavigationBarItem(icon: Icon(Icons.home), title: Text('首页')),",
			"BottomNavigationBarItem(",
			"icon: Icon(Icons.business), title: Text('商品')),",
			"BottomNavigationBarItem(icon: Icon(Icons.school), title: Text('学校')),",
			"],",
			"currentIndex: _selectIndex,",
			"fixedColor: Colors.blue,",
			"onTap: _onItemTapped,",
			"),",
			"body: TabBarView(",
			"controller: _tabController,",
			"children: tabs.map((e) {",
			"//创建三个tab页面",
			"return Container(",
			"alignment: Alignment.center,",
			"child: Text(",
			"e,",
			"textScaleFactor: 5,",
			"),",
			");",
			"}).toList()),",
			"floatingActionButton: FloatingActionButton(",
			"child: Icon(Icons.library_books),",
			"onPressed: _onAdd,",
			"),",
			");",
			"}",
			"// 管理状态、改变状态函数、触发函数",
			"void _onItemTapped(int index) {",
			"setState(() {",
			"_selectIndex = index;",
			"});",
			"}",
			"void _onAdd() {}",
			"}",
			"//抽屉菜单内容",
			"//抽屉菜单组件定义",
			"class MyDrawer extends StatelessWidget {",
			"const MyDrawer({",
			"Key key,",
			"}) : super(key: key);",
			"@override",
			"Widget build(BuildContext context) {",
			"return Drawer(",
			"child: MediaQuery.removePadding(",
			"context: context,",
			"//移除抽屉菜单顶部默认留白",
			"removeTop: true,",
			"child: Column(",
			"crossAxisAlignment: CrossAxisAlignment.start,",
			"children: <Widget>[",
			"Padding(",
			"padding: const EdgeInsets.only(top: 38.0),",
			"child: Row(",
			"children: <Widget>[",
			"Padding(",
			"padding: const EdgeInsets.symmetric(horizontal: 16.0),",
			"child: ClipOval(",
			"child: Image.network(",
			"'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3818670604,1923994441&fm=26&gp=0.jpg',",
			"width: 80,",
			"),",
			"),",
			"),",
			"Text(",
			"'用户一',",
			"style: TextStyle(",
			"fontWeight: FontWeight.bold, color: Colors.pinkAccent),",
			")",
			"],",
			"),",
			"),",
			"Expanded(",
			"child: ListView(",
			"children: <Widget>[",
			"ListTile(",
			"leading: const Icon(Icons.add),",
			"title: const Text('Add account'),",
			"),",
			"ListTile(",
			"leading: const Icon(Icons.settings),",
			"title: const Text('Manage accounts'),",
			"),",
			"],",
			"),",
			"),",
			"],",
			"),",
			"),",
			");",
			"}",
			"}",
		],
		"description": "fluter-page-scaffold"
	},
	//flutter抽屉菜单定义
	"fluter-drawer": {
		"scope": "dart,flutter",
		"prefix": "@myfdrawer",
		"body": [
			"//抽屉菜单组件定义",
			"class MyDrawer extends StatelessWidget {",
			"const MyDrawer({",
			"Key key,",
			"}) : super(key: key);",
			"@override",
			"Widget build(BuildContext context) {",
			"return Drawer(",
			"child: MediaQuery.removePadding(",
			"context: context,",
			"//移除抽屉菜单顶部默认留白",
			"removeTop: true,",
			"child: Column(",
			"crossAxisAlignment: CrossAxisAlignment.start,",
			"children: <Widget>[",
			"Padding(",
			"padding: const EdgeInsets.only(top: 38.0),",
			"child: Row(",
			"children: <Widget>[",
			"Padding(",
			"padding: const EdgeInsets.symmetric(horizontal: 16.0),",
			"child: ClipOval(",
			"child: Image.network(",
			"'https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3818670604,1923994441&fm=26&gp=0.jpg',",
			"width: 80,",
			"),",
			"),",
			"),",
			"Text(",
			"'用户一',",
			"style: TextStyle(fontWeight: FontWeight.bold),",
			")",
			"],",
			"),",
			"),",
			"Expanded(",
			"child: ListView(",
			"children: <Widget>[",
			"ListTile(",
			"leading: const Icon(Icons.add),",
			"title: const Text('Add account'),",
			"),",
			"ListTile(",
			"leading: const Icon(Icons.settings),",
			"title: const Text('Manage accounts'),",
			"),",
			"],",
			"),",
			"),",
			"],",
			"),",
			"),",
			");",
			"}",
			"}",
		],
		"description": "fluter-drawer"
	},
	// 数据共享InheriteWidget:针对父、子、子孙
	"flutter-share": {
		"scope": "dart,flutter",
		"prefix": "@myfshare",
		"body": [
			"class ShareDataWidget extends InheritedWidget {",
			"ShareDataWidget({",
			"@required this.data,",
			"Widget child",
			"}) :super(child: child);",
			"final int data; //需要在子树中共享的数据，保存点击次数",
			"//定义一个便捷方法，方便子树中的widget获取共享数据  ",
			"static ShareDataWidget of(BuildContext context) {",
			"return context.inheritFromWidgetOfExactType(ShareDataWidget);",
			"}",
			"//该回调决定当data发生变化时，是否通知子树中依赖data的Widget  ",
			"@override",
			"bool updateShouldNotify(ShareDataWidget old) {",
			"//如果返回true，则子树中依赖(build函数中有调用)本widget",
			"//的子widget的`state.didChangeDependencies`会被调用",
			"return old.data != data;",
			"}",
			"},"
		],
		"description": "flutter share"
	},
}